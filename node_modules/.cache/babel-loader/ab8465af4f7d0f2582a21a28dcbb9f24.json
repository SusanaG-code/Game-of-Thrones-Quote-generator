{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/susanagonzalezvejo/Desktop/Adalab/ejercicios-de-Adalab/module-03-react/Quote-geneator-twitter-hooks/my-react-project/src/components/App.js\",\n    _s2 = $RefreshSig$();\n\nimport \"../stylesheets/App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport QuoteBlock from \"../components/quote.jsx\";\nimport colorList from \"../helpers/colors\";\nconst api_url = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n\nconst app = props => {\n  _s2();\n\n  const [quotesList, setQuotesList] = useState([]);\n  const [quote, setQuote] = useState({});\n  const [appColor, setAppColor] = useState(\"336699\");\n  const [error, setError] = useState({\n    status: false,\n    message: \"\"\n  });\n\n  const generateRandomNumber = max => {\n    return Math.floor(Math.random() * max);\n  };\n\n  const changeAppColor = list => {\n    let randomIndex = generateRandomNumber(list.length);\n\n    while (list[randomIndex] === appColor) {\n      randomIndex = generateRandomNumber(list.length);\n    }\n\n    setAppColor(list[randomIndex]);\n  };\n\n  const setRandomQuote = list => {\n    let randomIndex = generateRandomNumber(list.length);\n\n    while (list[randomIndex].quote === quote.quote) {\n      randomIndex = generateRandomNumber(list.length);\n    }\n\n    setQuote(quotesList[randomIndex]);\n    changeAppColor(colorList);\n  }; // reach to the api to grab a list of quotes from the server\n\n\n  useEffect(() => {\n    // reset error state before reaching out\n    setError({\n      status: false,\n      message: \"\"\n    }); // check if quotes has been already fetched\n\n    if (quotesList.length === 0) {\n      var _s = $RefreshSig$();\n\n      fetch(api_url).then(res => res.json()).then(res => setQuotesList(res.quotes)).catch(_s(err => {\n        _s();\n\n        return useState({\n          error: true,\n          message: err.message\n        });\n      }, \"EplPEI3ibIxkINAVVXVRJYxDh+E=\"));\n    } else {\n      setRandomQuote(quotesList);\n    }\n  }, [quotesList]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      \"--app-background\": `#${appColor}`\n    },\n    children: error.status ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(QuoteBlock, {\n      value: quote,\n      onQuoteChange: () => setRandomQuote(quotesList)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(app, \"nEKenP+8/662QObx5bzXRavOSKM=\");\n\nexport default app;","map":{"version":3,"sources":["/Users/susanagonzalezvejo/Desktop/Adalab/ejercicios-de-Adalab/module-03-react/Quote-geneator-twitter-hooks/my-react-project/src/components/App.js"],"names":["React","useState","useEffect","QuoteBlock","colorList","api_url","app","props","quotesList","setQuotesList","quote","setQuote","appColor","setAppColor","error","setError","status","message","generateRandomNumber","max","Math","floor","random","changeAppColor","list","randomIndex","length","setRandomQuote","fetch","then","res","json","quotes","catch","err"],"mappings":"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","sourcesContent":["import \"../stylesheets/App.css\";\n\nimport React, { useState, useEffect } from \"react\";\nimport QuoteBlock from \"../components/quote.jsx\";\nimport colorList from \"../helpers/colors\";\n\nconst api_url =\n  \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n\nconst app = (props) => {\n  const [quotesList, setQuotesList] = useState([]);\n  const [quote, setQuote] = useState({});\n  const [appColor, setAppColor] = useState(\"336699\");\n  const [error, setError] = useState({ status: false, message: \"\" });\n\n  const generateRandomNumber = (max) => {\n    return Math.floor(Math.random() * max);\n  };\n\n  const changeAppColor = (list) => {\n    let randomIndex = generateRandomNumber(list.length);\n    while (list[randomIndex] === appColor) {\n      randomIndex = generateRandomNumber(list.length);\n    }\n    setAppColor(list[randomIndex]);\n  };\n\n  const setRandomQuote = (list) => {\n    let randomIndex = generateRandomNumber(list.length);\n    while (list[randomIndex].quote === quote.quote) {\n      randomIndex = generateRandomNumber(list.length);\n    }\n    setQuote(quotesList[randomIndex]);\n    changeAppColor(colorList);\n  };\n\n  // reach to the api to grab a list of quotes from the server\n  useEffect(() => {\n    // reset error state before reaching out\n    setError({ status: false, message: \"\" });\n    // check if quotes has been already fetched\n    if (quotesList.length === 0) {\n      fetch(api_url)\n        .then((res) => res.json())\n        .then((res) => setQuotesList(res.quotes))\n        .catch((err) => useState({ error: true, message: err.message }));\n    } else {\n      setRandomQuote(quotesList);\n    }\n  }, [quotesList]);\n\n  return (\n    <div className=\"App\" style={{ \"--app-background\": `#${appColor}` }}>\n      {error.status ? (\n        <h1>{error.message}</h1>\n      ) : (\n        <QuoteBlock\n          value={quote}\n          onQuoteChange={() => setRandomQuote(quotesList)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default app;\n"]},"metadata":{},"sourceType":"module"}